{"version":3,"file":"js/graph.9ba94cec.js","mappings":"+JAAA,IAAIA,EAAS,WAAkB,IAAIC,EAAIC,KAAKC,EAAGF,EAAIG,MAAMD,GAAG,OAAOA,EAAG,MAAM,CAACE,IAAI,QAAQC,MAAM,CAAC,GAAK,UAAU,CAACL,EAAIM,GAAG,qBACvH,EACIC,EAAkB,GCKtB,G,SAAA,CACAC,KAAA,YACAC,OACA,OACAC,MAAA,GACAC,MAAA,GAEA,EACAC,UACA,KAAAC,WAAA,CAAAC,WAAA,KAAAC,MAAAC,QACA,KAAAC,aAEA,EACAC,QAAA,CACAC,SACA,QAAAC,GAAA,KAAAJ,MAAA,CACA,IAAAN,EAAA,KAAAA,MAAAW,KAAAC,IAAA,IAAAA,MACAX,EAAA,KAAAA,MAAAU,KAAAC,IAAA,IAAAA,MACA,KAAAN,MAAAO,UAAA,CAAAb,MAAAA,EAAAC,MAAAA,IACAa,QAAAC,IAAA,KAAAT,MAAAO,YACA,CACA,EACAN,cAEA,UAAAS,EAAAC,KAAAC,OAAAC,QAAA,KAAAC,OAAA,CACAN,QAAAC,IAAA,SAAAC,EAAAC,GAEAA,EAAAI,GAAAJ,EAAAD,SACAC,EAAAK,MAAA,OACA,IAAAC,EAAA,KAAAvB,MAAAwB,WAAAC,GAAAA,EAAAJ,IAAAJ,EAAAI,MACA,IAAAE,EAAA,KAAAvB,MAAA0B,KAAAT,GAAAC,OAAAS,OAAA,KAAA3B,MAAAuB,GAAAN,GAGAH,QAAAC,IAAAE,EAAAW,OACA,UAAAP,EAAAQ,KAAAX,OAAAC,QAAAF,EAAAW,OAAA,CACAC,EAAAR,GAAAA,EACAQ,EAAA/B,KAAAuB,EACAQ,EAAAP,MAAA,OACA,IAAAQ,EAAA,KAAA9B,MAAAwB,WAAAC,GAAAA,EAAAJ,IAAAQ,EAAAR,MACA,IAAAS,EAAA,KAAA9B,MAAA0B,KAAAG,GAAAX,OAAAS,OAAA,KAAA3B,MAAA8B,GAAAD,GAEA,IAAAE,EAAA,CAAAC,OAAAf,EAAAI,GAAAY,OAAAJ,EAAAR,GAAAC,MAAA,UAAAY,MAAA,UAAAC,MAAA,QACAN,EAAAR,IAAAJ,EAAAmB,SACAL,EAAAT,MAAA,UACAS,EAAAG,MAAA,UACAH,EAAAI,MAAA,MACArB,QAAAC,IAAA,QAAAgB,IASA,IAAAM,EAAA,KAAApC,MAAAuB,WAAAc,GAAAA,EAAAN,QAAAD,EAAAC,QAAAM,EAAAL,QAAAF,EAAAE,UACA,IAAAI,EAAA,KAAApC,MAAAyB,KAAAK,GAAAb,OAAAS,OAAA,KAAA1B,MAAAoC,GAAAN,EAGA,CAEA,CACA,KAAAtB,QACA,GAEA8B,MAAA,CACAvC,QACA,KAAAS,QACA,EACAR,QACA,KAAAQ,QACA,EACAH,QACA,KAAAG,QACA,EACAW,QACA,KAAAb,aAEA,EACAiC,eACA1B,QAAAC,IAAA,KAAAyB,cACA,KAAAjC,cACA,KAAAkC,cACA,EACAC,cAGA,OAFA5B,QAAAC,IAAA,KAAA2B,aAEA,KAAAA,YAAApB,OACA,WAKA,KAAAqB,UAAA,CAAAtB,GAAA,KAAAqB,YAAArB,KACA,MACA,WAEA,MACA,QACAP,QAAAC,IAAA,2BAGA,GAEA6B,SAAA,CAOAtC,QACA,YAAAuC,OAAAC,MAAAC,QAAAzC,KACA,EACAc,MAAA,CACA4B,OAAA,EACAC,MACA,YAAAJ,OAAAC,MAAAI,MAAA9B,KACA,GAEAoB,eACA,YAAAK,OAAAC,MAAAI,MAAAV,YACA,EACAW,UACA,YAAAN,OAAAC,MAAAM,KAAAD,OACA,EACAT,cACA,YAAAG,OAAAC,MAAAC,QAAAL,WACA,KCvIyP,I,UCQrPW,GAAY,OACd,EACAhE,EACAQ,GACA,EACA,KACA,WACA,MAIF,EAAewD,EAAiB,O","sources":["webpack://noosphere/./src/views/GraphView.vue","webpack://noosphere/src/views/GraphView.vue","webpack://noosphere/./src/views/GraphView.vue?2e07","webpack://noosphere/./src/views/GraphView.vue?bd9c"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{ref:\"graph\",attrs:{\"id\":\"graph\"}},[_vm._v(\"Loading graph...\")])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n\r\n  <div id=\"graph\"  ref=\"graph\">Loading graph...</div>\r\n\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'GraphView',\r\n  data(){\r\n    return{\r\n      nodes: [],\r\n      links: []\r\n    }\r\n  },\r\n  mounted(){\r\n    this.$graphInit({domElement: this.$refs.graph})\r\n    this.updateUsers()\r\n    // this.users = this.$store.state.actor.users\r\n  },\r\n  methods:{\r\n    update(){\r\n      if (this.graph != undefined){\r\n        let nodes = this.nodes.map(a => {return {...a}})\r\n        let links = this.links.map(a => {return {...a}})\r\n        this.graph.graphData({nodes: nodes, links: links})\r\n        console.log(this.graph.graphData())\r\n      }\r\n    },\r\n    updateUsers(){\r\n      //  this.links = []\r\n      for (const [clientID, user] of Object.entries(this.users)) {\r\n        console.log('[user]',clientID,user);\r\n        // user\r\n        user.id = user.clientID\r\n        user.group = \"user\"\r\n        var indexU = this.nodes.findIndex(x => x.id==user.id);\r\n        indexU === -1 ? this.nodes.push(user) : Object.assign(this.nodes[indexU], user)\r\n        //  console.log(this.nodes)\r\n        // rooms\r\n        console.log(user.rooms)\r\n        for (const [id, room] of Object.entries(user.rooms)) {\r\n          room.id = id\r\n          room.name = id\r\n          room.group = \"room\"\r\n          var indexR = this.nodes.findIndex(x => x.id==room.id);\r\n          indexR === -1 ? this.nodes.push(room) : Object.assign(this.nodes[indexR], room)\r\n          // console.log(this.nodes)\r\n          let link = {source: user.id, target: room.id, group: \"visited\", label: \"visited\", color: 'blue'}\r\n          if (room.id == user.roomID){\r\n            link.group = \"current\"\r\n            link.label = \"current\"\r\n            link.color = \"red\"\r\n            console.log('#link',link)\r\n            //  Object.assign(this.nodes[user.roomID], {color: 'red', group: 'occuped'})\r\n          }\r\n          // else{\r\n          //   link.label = \"room\"\r\n          // }\r\n          //  console.log(link)\r\n          //  console.log('links before', this.links)\r\n          // this.links = this.links.filter(l => {return l.source == link.source && l.target == link.target})\r\n          var indexL = this.links.findIndex(l => l.source == link.source && l.target == link.target);\r\n          indexL === -1 ? this.links.push(link) : Object.assign(this.links[indexL], link)\r\n          // console.log('links after', this.links)\r\n          // this.links.push(link)\r\n        }\r\n\r\n      }\r\n      this.update()\r\n    }\r\n  },\r\n  watch:{\r\n    nodes(){\r\n      this.update()\r\n    },\r\n    links(){\r\n      this.update()\r\n    },\r\n    graph(){\r\n      this.update()\r\n    },\r\n    users(){\r\n      this.updateUsers()\r\n\r\n    },\r\n    usersUpdated(){\r\n      console.log(this.usersUpdated)\r\n      this.updateUsers()\r\n      this.$forceUpdate()\r\n    },\r\n    currentNode(){\r\n      console.log(this.currentNode)\r\n      // let user = this.$store.state.actor.user\r\n      switch (this.currentNode.group) {\r\n        case \"room\":\r\n\r\n        // user.roomID = this.currentNode.id\r\n        // this.$store.commit('actor/setUser', user)\r\n        // this.$connect('graphview')\r\n        this.$openRoom({id: this.currentNode.id})\r\n        break;\r\n        case \"user\":\r\n\r\n        break;\r\n        default:\r\n        console.log(\"i don't know what to do\")\r\n\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    // nodes() {\r\n    //   return this.$store.state.network.nodes\r\n    // },\r\n    // links() {\r\n    //   return this.$store.state.network.links\r\n    // },\r\n    graph() {\r\n      return this.$store.state.network.graph\r\n    },\r\n    users: {\r\n      cache: false,\r\n      get() {\r\n        return this.$store.state.actor.users;\r\n      },\r\n    },\r\n    usersUpdated() {\r\n      return this.$store.state.actor.usersUpdated\r\n    },\r\n    uploads() {\r\n      return this.$store.state.web3.uploads\r\n    },\r\n    currentNode(){\r\n      return this.$store.state.network.currentNode\r\n    }\r\n  },\r\n\r\n}\r\n</script>\r\n\r\n<style lang=\"css\" scoped>\r\n.graph-view {\r\n\r\n}\r\n.node-label {\r\n  font-size: 12px;\r\n  padding: 1px 4px;\r\n  border-radius: 4px;\r\n  background-color: rgba(0,0,0,0.5);\r\n  user-select: none;\r\n}\r\n</style>\r\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./GraphView.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./GraphView.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./GraphView.vue?vue&type=template&id=341b3c35&scoped=true&\"\nimport script from \"./GraphView.vue?vue&type=script&lang=js&\"\nexport * from \"./GraphView.vue?vue&type=script&lang=js&\"\nimport style0 from \"./GraphView.vue?vue&type=style&index=0&id=341b3c35&prod&lang=css&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"341b3c35\",\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","ref","attrs","_v","staticRenderFns","name","data","nodes","links","mounted","$graphInit","domElement","$refs","graph","updateUsers","methods","update","undefined","map","a","graphData","console","log","clientID","user","Object","entries","users","id","group","indexU","findIndex","x","push","assign","rooms","room","indexR","link","source","target","label","color","roomID","indexL","l","watch","usersUpdated","$forceUpdate","currentNode","$openRoom","computed","$store","state","network","cache","get","actor","uploads","web3","component"],"sourceRoot":""}