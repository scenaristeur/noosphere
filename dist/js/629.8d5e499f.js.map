{"version":3,"file":"js/629.8d5e499f.js","mappings":"8JAAA,IAAIA,EAAS,WAAkB,IAAIC,EAAIC,KAAKC,EAAGF,EAAIG,MAAMD,GAAG,OAAOA,EAAG,MAAM,CAACE,YAAY,YAAYC,MAAM,CAAC,GAAK,cAAc,CAACH,EAAG,SAAS,CAACE,YAAY,OAAOE,YAAY,CAAC,YAAY,SAASD,MAAM,CAAC,MAAQ,cAAc,IAAM,YAAY,CAACH,EAAG,cAAc,CAACA,EAAG,UAAU,CAACG,MAAM,CAAC,YAAc,wBAAwBE,GAAG,CAAC,MAAQ,SAASC,GAAQ,OAAIA,EAAOC,KAAKC,QAAQ,QAAQV,EAAIW,GAAGH,EAAOI,QAAQ,QAAQ,GAAGJ,EAAOK,IAAI,SAAgB,KAAYb,EAAIc,SAASC,MAAM,KAAMC,UAAW,GAAEC,MAAM,CAACC,MAAOlB,EAAImB,KAAKC,OAAQC,SAAS,SAAUC,GAAMtB,EAAIuB,KAAKvB,EAAImB,KAAM,SAAUG,EAAK,EAACE,WAAW,iBAA2C,GAAzBxB,EAAImB,KAAKC,OAAOK,OAAYvB,EAAG,WAAW,CAACG,MAAM,CAAC,KAAO,KAAK,QAAU,QAAQE,GAAG,CAAC,MAAQP,EAAIc,WAAW,CAACd,EAAI0B,GAAG,QAAQ1B,EAAI2B,KAA+B,GAAzB3B,EAAImB,KAAKC,OAAOK,OAAYvB,EAAG,OAAO,CAACA,EAAG,WAAW,CAACG,MAAM,CAAC,KAAO,KAAK,QAAU,gBAAgBE,GAAG,CAAC,MAAQP,EAAI4B,aAAa,CAAC5B,EAAI0B,GAAG,sBAAsB1B,EAAI0B,GAAG,QAAQxB,EAAG,WAAW,CAACG,MAAM,CAAC,KAAO,KAAK,QAAU,gBAAgBE,GAAG,CAAC,MAAQP,EAAI6B,QAAQ,CAAC7B,EAAI0B,GAAG,gBAAgB1B,EAAI0B,GAAG,SAAS,GAAGxB,EAAG,WAAW,CAACG,MAAM,CAAC,KAAO,KAAK,QAAU,gBAAgBE,GAAG,CAAC,MAAQ,SAASC,GAAQR,EAAImB,KAAKC,OAAS,EAAG,IAAG,CAACpB,EAAI0B,GAAG,kBAAkBxB,EAAG,SAAS,CAACG,MAAM,CAAC,OAASL,EAAImB,KAAKC,QAAQb,GAAG,CAAC,cAAgBP,EAAI8B,oBAAoB,IAAI,IAAI,EAC/vC,EACGC,EAAkB,G,SCuCtB,GACAC,KAAAA,WACAC,WAAAA,CACA,0CAGAC,OACA,OAEAC,MAAAA,CAAAA,EACAC,OAAAA,CACA,CACAvB,IAAAA,OACAwB,UAAAA,GAEA,CACAxB,IAAAA,SACAyB,MAAAA,OACAD,UAAAA,IAKAE,OAAAA,KACAC,OAAAA,EACAC,KAAAA,KACAC,SAAAA,KACAC,MAAAA,GACAC,QAAAA,GAEAC,IAAAA,KACAC,QAAAA,KAGA,EAEAC,QAAAA,CAEAC,aACA,kBACA,EA2BApB,aACA,2BACA,eACA,EACAC,QACA,4BACA,eACA,EAEA,iBACA,gBA2EA,EA6CAC,gBAAAA,GACAmB,QAAAA,IAAAA,mBAAAA,GACA,mBACA,gBACA,mBACA,GA2BAC,SAAAA,CACA/B,OACA,kCACA,ICjRwP,I,UCQpPgC,GAAY,OACd,EACApD,EACAgC,GACA,EACA,KACA,WACA,MAIF,EAAeoB,EAAiB,O","sources":["webpack://noosphere/./src/views/RoomCard.vue","webpack://noosphere/src/views/RoomCard.vue","webpack://noosphere/./src/views/RoomCard.vue?4e51","webpack://noosphere/./src/views/RoomCard.vue?a916"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"room-card\",attrs:{\"id\":\"room-card\"}},[_c('b-card',{staticClass:\"mb-2\",staticStyle:{\"max-width\":\"20rem\"},attrs:{\"title\":\"Open a room\",\"tag\":\"article\"}},[_c('b-card-text',[_c('b-input',{attrs:{\"placeholder\":\"roomId | random | QR\"},on:{\"keyup\":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,\"enter\",13,$event.key,\"Enter\"))return null;return _vm.openRoom.apply(null, arguments)}},model:{value:(_vm.user.roomId),callback:function ($$v) {_vm.$set(_vm.user, \"roomId\", $$v)},expression:\"user.roomId\"}}),(_vm.user.roomId.length !=0)?_c('b-button',{attrs:{\"size\":\"sm\",\"variant\":\"info\"},on:{\"click\":_vm.openRoom}},[_vm._v(\"Go\")]):_vm._e(),(_vm.user.roomId.length ==0)?_c('span',[_c('b-button',{attrs:{\"size\":\"sm\",\"variant\":\"outline-info\"},on:{\"click\":_vm.generateId}},[_vm._v(\"Randomize roomId\")]),_vm._v(\" or \"),_c('b-button',{attrs:{\"size\":\"sm\",\"variant\":\"outline-info\"},on:{\"click\":_vm.nowId}},[_vm._v(\"Now roomId\")]),_vm._v(\" or \")],1):_c('b-button',{attrs:{\"size\":\"sm\",\"variant\":\"outline-info\"},on:{\"click\":function($event){_vm.user.roomId = ''}}},[_vm._v(\"Reset roomId\")]),_c('QrView',{attrs:{\"roomId\":_vm.user.roomId},on:{\"roomIdChanged\":_vm.onRoomIdChanged}})],1)],1)],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n      <div class=\"room-card\" id=\"room-card\">\n        <b-card\n        title=\"Open a room\"\n        tag=\"article\"\n        style=\"max-width: 20rem;\"\n        class=\"mb-2\"\n        >\n      <b-card-text>\n\n\n\n        <b-input v-model=\"user.roomId\" placeholder=\"roomId | random | QR\"\n        @keyup.enter=\"openRoom\" />\n        <b-button v-if=\"user.roomId.length !=0\" size=\"sm\" variant=\"info\" @click=\"openRoom\">Go</b-button>\n\n\n        <span v-if=\"user.roomId.length ==0\">\n          <b-button  size=\"sm\" variant=\"outline-info\" @click=\"generateId\">Randomize roomId</b-button> or\n          <b-button  size=\"sm\" variant=\"outline-info\" @click=\"nowId\">Now roomId</b-button> or\n        </span>\n\n        <b-button v-else size=\"sm\" variant=\"outline-info\" @click=\"user.roomId = ''\">Reset roomId</b-button>\n\n\n        <QrView :roomId=\"user.roomId\" @roomIdChanged=\"onRoomIdChanged\"/>\n\n</b-card-text>\n\n\n</b-card>\n\n</div>\n\n\n</template>\n\n<script>\n\nimport { v4 as uuidv4 } from 'uuid';\n\nexport default {\n  name: 'RoomCard',\n  components: {\n    'QrView': ()=>import('@/views/QrView'),\n    // 'UserView': ()=>import('@/views/UserView'),\n  },\n  data(){\n    return{\n      //user: {},\n      users: {},\n      fields: [\n        {\n          key: 'name',\n          sortable: true\n        },\n        {\n          key: 'roomId',\n          label: 'room',\n          sortable: true\n        },],\n        // username: \"\",\n        // usercolor: null,\n        // roomId: null,\n        yarray: null,\n        newVal: 3,\n        ymap: null,\n        newStuff: 'c4',\n        nodes: [],\n        newName: '',\n\n        url: null,\n        scanner: null,\n\n      }\n    },\n\n    methods:{\n\n      randomUser(){\n        this.$randomUser()\n      },\n      // manageAwareness(){\n      //\n      //   // see https://stackblitz.com/edit/y-quill-awareness?file=index.ts\n      //   // this.webrtcAwareness = this.webrtcProvider.awareness\n      //   // this.websocketAwareness = this.websocketProvider.awareness\n      //   let app = this\n      //\n      //   // this.clientID = this.awareness.clientID\n      //   // console.log(\"CLIENTS ID\", this.awareness, this.clientID)\n      //   //\n      //\n      //\n      //   // if (user != undefined){\n      //   //   this.username = user.name\n      //   //   this.usercolor = user.color\n      //   //   this.roomId = user.roomId\n      //   //   this.updateUser()\n      //   // }\n      //\n      //\n      //   // // All of our network providers implement the awareness crdt\n      //\n      //   // You can observe when a user updates their awareness information\n      //\n      // },\n\n      generateId(){\n        this.user.roomId = uuidv4()\n        this.openRoom()\n      },\n      nowId(){\n        this.user.roomId = Date.now()\n        this.openRoom()\n      },\n\n      async openRoom(){\n        this.$openRoom()\n        //  this.editorData = null\n        // this.userChanged()\n        // this.ymap = this.ydoc.getMap(this.user.roomId)\n        //\n        // console.log(\"[openRoom]\", this.user.roomId)\n        // //this.updateUser()\n        //\n        // let editorData = await this.ymap.get('editor_map')\n        // console.log(editorData)\n        // if (editorData != undefined){\n        //   //   console.log(editorData)\n        //   this.editorData = editorData //|| this.editorDataDefault//.toJSON()\n        //   // //  console.log(this.editorData)\n        //   // //  yService.log(this.editorData)\n        // }else{\n        //   this.ymap.set('editor_map', this.editorDataDefault)\n        //   this.editorData = Object.assign({}, this.editorDataDefault)\n        // }\n        // // observe changes of the sum\n        // // let app = this\n        //\n        // // let calls = 0\n        // this.ymap.observeDeep(events => {\n        //   events.forEach(event => {\n        //     // calls++\n        //     // console.log('calls', calls)\n        //     // @ts-ignore\n        //     // console.log(event.keysChanged.has('deepmap'))\n        //     // console.log(event.path.length === 1)\n        //     // console.log(event.path[0] === 'map')\n        //     console.log('[event]',event)\n        //     let editor_map_changed = event.keysChanged.has('editor_map')\n        //     console.log('[editor_map_changed]', editor_map_changed)\n        //     // @ts-ignore\n        //     // let dmapid = event.target.get('deepmap')._item.id\n        //     // console.log(dmapid)\n        //\n        //     // console.log(\"nodes\",event.target.get('nodes').toJSON())\n        //     // this.nodes = event.target.get('nodes').toJSON()\n        //     // if (event.keysChanged.has('editor_map')){\n        //     // yService.log('editor_map changed')\n        //     //  let editorData = this.ymap.get('editor_map')\n        //\n        //\n        //\n        //     if (editor_map_changed == true ){\n        //       //console.log(editorData)\n        //       let editorData = this.ymap.get('editor_map')\n        //       if (editorData.clientID != this.user.clientID){\n        //         this.editorData =  editorData//.toJSON()\n        //         console.log(\"[update editorData]\", this.editorData)\n        //       }else{\n        //         console.log(\"[same clientID]\")\n        //       }\n        //\n        //     }\n        //     //  yService.log(this.editorData)\n        //     //}\n        //     // this.populateEditor(this.editorData)\n        //     // }\n        //   })\n        //   this.$forceUpdate();\n        //   var url = location.href;               //Save down the URL without hash.\n        //   //location.href = \"#ymap_div\";                 //Go to the target element.\n        //   history.replaceState(null,null,url);\n        //\n        // })\n\n        // add 1 to the sum\n        // this.yarray.push([2]) // => \"new sum: 1\"\n        // if(this.ymap.get('editor_map') == undefined){\n        //   this.populateMap()\n        // }\n\n      },\n      // addToArray(){\n      //   this.yarray.push([this.newVal])\n      //   this.newVal = '1'\n      // },\n      // clear(){\n      //   this.yarray.delete(0, this.yarray.length)\n      // },\n      // addNodeToMap(){\n      //   const _mapNodes = this.ymap.get('nodes')\n      //\n      //   let node = {id: uuidv4(), name: this.newName, created: Date.now()}\n      //   _mapNodes.set(node.id, new Y.Map())\n      //   this.ymap.set(node.id, node)\n      //   this.newName = ''\n      //   this.$forceUpdate();\n      // },\n      // clearMap(){\n      //   this.ymap.clear()\n      //   this.$forceUpdate();\n      // },\n      // populateMap(){\n      //   //  this.ymap.set('map', new Y.Map())\n      //   //  this.ymap.set('editor_map', new Y.Map())\n      //   // this.ymap.set('nodes', new Y.Map())\n      //   // this.ymap.set('links', new Y.Map())\n      //   // const _map3 = this.ymap.get('map')\n      //   // _map3.set('deepmap', new Y.Map())\n      //   // this.ymap.set('stuff one', 'c2')\n      //   // _map3.set('stuff', 'c3')\n      //\n      //   // const _editorMap = this.ymap.get('editor_map')\n      //\n      //\n      //   //let data= { \"time\": 1661945860245, \"blocks\": [ { \"id\": \"6tUGo3YdzP\", \"type\": \"paragraph\", \"data\": { \"text\": \"dfsg\" } }, { \"id\": \"4K-n_v3Ppg\", \"type\": \"paragraph\", \"data\": { \"text\": \"sdf\" } } ], \"version\": \"2.25.0\" }\n      //\n      //   this.ymap.set('editor_map', this.editorData)\n      // },\n      // changeStuff(){\n      //   const _map3 = this.ymap.get('map')\n      //   _map3.set('stuff', this.newStuff)\n      //   this.newStuff= 'c4'\n      //   this.$forceUpdate();\n      // },\n\n      onRoomIdChanged(roomId){\n        console.log('[roomId changed]', roomId)\n        this.user.roomId = roomId\n        this.openRoom()\n        this.$forceUpdate()\n      }\n    },\n    // watch:{\n    //   room(){\n    //     console.log(\"room\", this.room)\n    //     this.room.observeDeep(events => {\n    //       events.forEach(event => {\n    //         calls++\n    //         console.log('calls', calls)\n    //         // @ts-ignore\n    //         // console.log(event.keysChanged.has('deepmap'))\n    //         // console.log(event.path.length === 1)\n    //         // console.log(event.path[0] === 'map')\n    //         // @ts-ignore\n    //         // let dmapid = event.target.get('deepmap')._item.id\n    //         // console.log(dmapid)\n    //         console.log(event, event)\n    //       })\n    //       // this.$forceUpdate();\n    //     })\n    //     this.$forceUpdate();\n    //     var url = location.href;               //Save down the URL without hash.\n    //     location.href = \"?room=\"+this.room+\"#room-card\";                 //Go to the target element.\n    //     history.replaceState(null,null,url);\n    //   }\n    // },\n\n    computed: {\n      user() {\n        return this.$store.state.core.user\n      },\n      // users() {\n      //   return this.$store.state.core.users\n      // },\n    }\n\n\n  }\n  </script>\n\n  <style lang=\"css\" scoped>\n  .room-card {\n\n  }\n  </style>\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./RoomCard.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./RoomCard.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./RoomCard.vue?vue&type=template&id=3b29bcd4&scoped=true&\"\nimport script from \"./RoomCard.vue?vue&type=script&lang=js&\"\nexport * from \"./RoomCard.vue?vue&type=script&lang=js&\"\nimport style0 from \"./RoomCard.vue?vue&type=style&index=0&id=3b29bcd4&prod&lang=css&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"3b29bcd4\",\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","staticClass","attrs","staticStyle","on","$event","type","indexOf","_k","keyCode","key","openRoom","apply","arguments","model","value","user","roomId","callback","$$v","$set","expression","length","_v","_e","generateId","nowId","onRoomIdChanged","staticRenderFns","name","components","data","users","fields","sortable","label","yarray","newVal","ymap","newStuff","nodes","newName","url","scanner","methods","randomUser","console","computed","component"],"sourceRoot":""}